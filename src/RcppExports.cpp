// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// internal_flatten
List internal_flatten(CharacterVector lines);
RcppExport SEXP ndjson_internal_flatten(SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_flatten(lines));
    return rcpp_result_gen;
END_RCPP
}
// internal_stream_in
List internal_stream_in(const std::string& path);
RcppExport SEXP ndjson_internal_stream_in(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_stream_in(path));
    return rcpp_result_gen;
END_RCPP
}
// internal_validate
bool internal_validate(std::string path, bool verbose);
RcppExport SEXP ndjson_internal_validate(SEXP pathSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_validate(path, verbose));
    return rcpp_result_gen;
END_RCPP
}
