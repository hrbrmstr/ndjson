// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// flatten_int
List flatten_int(CharacterVector lines);
RcppExport SEXP _ndjson_flatten_int(SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(flatten_int(lines));
    return rcpp_result_gen;
END_RCPP
}
// stream_in_int
List stream_in_int(const std::string& path);
RcppExport SEXP _ndjson_stream_in_int(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(stream_in_int(path));
    return rcpp_result_gen;
END_RCPP
}
// validate_int
bool validate_int(std::string path, bool verbose);
RcppExport SEXP _ndjson_validate_int(SEXP pathSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_int(path, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ndjson_flatten_int", (DL_FUNC) &_ndjson_flatten_int, 1},
    {"_ndjson_stream_in_int", (DL_FUNC) &_ndjson_stream_in_int, 1},
    {"_ndjson_validate_int", (DL_FUNC) &_ndjson_validate_int, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ndjson(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
